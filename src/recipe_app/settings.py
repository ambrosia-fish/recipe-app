"""
Django settings for recipe_app project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ALLOWED_HOSTS') else []

# Add default hosts if needed
if not ALLOWED_HOSTS:
    ALLOWED_HOSTS = ['gamila.feztech.io', 'localhost', '127.0.0.1', '.herokuapp.com']

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # recipe related apps
    "recipes",
    "whitenoise.runserver_nostatic",  # Add this for WhiteNoise
    'cloudinary',
    'cloudinary_storage',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "recipe_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "recipe_app.wsgi.application"

# Database Configuration - MongoDB Support
# Default to SQLite for local development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Use MongoDB if MONGODB_URI is set
if os.environ.get('MONGODB_URI'):
    try:
        DATABASES = {
            'default': {
                'ENGINE': 'djongo',
                'NAME': os.environ.get('MONGODB_NAME', 'recipedb'),
                'CLIENT': {
                    'host': os.environ.get('MONGODB_URI'),
                    'username': os.environ.get('MONGODB_USERNAME'),
                    'password': os.environ.get('MONGODB_PASSWORD'),
                    'authSource': os.environ.get('MONGODB_AUTH_SOURCE', 'admin'),
                    'authMechanism': 'SCRAM-SHA-1',
                    'connectTimeoutMS': 5000,  # 5 second connection timeout
                    'socketTimeoutMS': 10000,  # 10 second socket timeout
                    'retryWrites': True,
                    'w': 'majority',
                }
            }
        }
        print("Using MongoDB database", file=sys.stderr)
    except Exception as e:
        print(f"Error setting up MongoDB, falling back to SQLite: {str(e)}", file=sys.stderr)
# Or try PostgreSQL if DATABASE_URL is set
elif os.environ.get('DATABASE_URL'):
    try:
        # Configure PostgreSQL with minimal connections
        db_config = dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=20,  # Very short connection lifetime
            ssl_require=True,
        )
        
        # Add options for minimal connections and fast timeouts
        db_config['OPTIONS'] = {
            'connect_timeout': 5,  # 5 second connection timeout
            'options': '-c statement_timeout=10000',  # 10 second query timeout
            'sslmode': 'require',
        }
        
        # Test the database connection before applying the settings
        import psycopg2
        conn = psycopg2.connect(os.environ.get('DATABASE_URL'))
        conn.close()
        
        # Only update DATABASES if connection test passed
        DATABASES['default'] = db_config
        print("Using PostgreSQL database", file=sys.stderr)
    except Exception as e:
        print(f"Error connecting to PostgreSQL, using SQLite: {str(e)}", file=sys.stderr)

# Static files (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_DIRS = [
    BASE_DIR / 'static'
]


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "src" "media"

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AUTH
LOGIN_URL = "/login/"
